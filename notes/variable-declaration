************************************************************************************************************************************
作者：millerix
链接：https://www.jianshu.com/p/cd7961823cd1
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
************************************************************************************************************************************
1. 声明
分为”定义性声明” 和 ”引用性声明”。
因此声明包括定义， 定义是一种声明。

     extern int a；//是引用性声明
     int a；// 是定义性声明
定义性声明与引用性声明的本质区别在于: 定义性声明分配了存储空间，而引用性声明则没有分配存储空间
注意为变量分配空间不是变量初始化，此时变量中的数值无法确定。

2. 变量的初始化
定义性声明在分配空间后第一次赋值的过程就是所谓的初始化。
对于局部变量 因为定义性声明在第一次赋值之前就分配了存储空间（stack中），所以没有初始化的变量其值是不确定的。
对于静态变量， 默认初始化为零。

3. 作用域
广义的作用域：
广义的作用域分为两种：（见K&R c p205）
- 词法作用域： 本质上是同一个文件中的特定符号（变量）可以被引用（可用性）的**代码范围**
- 链接作用域： 本质上是位于不同文件的同名符号（变量 函数）之间的是否引用到同一个存储空间。
狭义的作用域
上面说的词法作用域是狭义上的作用域。
定义： 变量的作用域，就是该变量在程序中能被引用的代码区域。

当变量在程序的某一部分被声明时，只有在程序的一定区域才能被访问。这个区域由变量的作用域（scope）决定。 C编译器可以确认4种不同类型的作用域：

文件作用域： 外部变量都具有文件作用域。
函数形参作用域： 函数定义中形参作用域的作用域是整个函数体， 函数声明中形参作用域是函数形参列表。
代码块作用域： (block scope)用{}括起来的部分， 包括if for while 等
标签作用域：语句标签用于goto语句。一个函数中的所有语句标签必须唯一。也就要求标签作用域是整个函数。

4. 变量
外部变量：任何在代码块外部（函数外）声明的变量

内部变量：代码块内声明的变量

5. 链接属性
定义：规定了标识符是否能被其他文件引用；

如果相同的标示符出现在几个不同个源文件中，他们是否表示同一个实体。这由标示符的链接属性(linkage)决定。
因为函数外声明的变量才有可能会在其他文件使用，所以外部变量才会有链接属性。

链接属性分为：外部(external),内部(internal),无（none）

标示符的作用域和链接属性相关，链接属性决定作用域，但二者并不相同。具体来说， 连接属性决定了链接作用域

具有外部链接属性的变量：

外部变量X天生具有外链接属性，其他文件可以通过引用性声明引用到该变量X；
如何引用其他文件中定义的外部变量：在外部变量的声明时加上external 关键字， 就把改变量的定义性声明变为引用性声明，
编译器就会引用其他文件同一个标识符的定义性声明作为改标识符的定义性声明。

具有内部链接属性的变量

加上static 关键字的定义性声明 会使得外部变量X的可引用范围（也就是作用域）被限定在本文件中。在外部变量的声明时加上static 关键字， 
就改变了连接属性（external -》 interanl）， 其他文件的同名标识符就无法引用到该文件中的interal 链接属性的标识符。

无链接属性的变量

内部变量是没有链接属性的， 他的作用域（被引用到的范围）限定在其声明的代码块内，

static 作用在 外部链接属性的 变量上（一般是外部变量） 才能改变该变了的链接属性为内部， 
作用在无链接属性的变量上时不改变链接属性，只改变存储类从动态类型变为静态类型

extern 作用在 无链接属性的变量声明（也就是内部变量）和具有外链接属性的外部变量声明上时（extern int a），
把链接属性变为 外链接属性， 即表明该变量的定义在其他文件中。

这里有两个关键字：extern 和 static，与标示符的链接属性相关。

static：如果某个声明默认情况下具有外部external属性，加上static后，可以将其链接属性变为internal、。
static限制了标识符的作用域：可以将该标示符的作用域限定为本文件，防止被其他源文件使用。

extern： 使外部变量的定义性声明变为引用性声明。告诉要使用它的文件或函数，这个变量在别的文件内声明，这里只是引用。

注：static只对缺省链接属性为external的声明才有改变链接属性的效果。见外部static

6. 存储类型
网络截图
变量的存储类型（storage class)是指存储变量值的内存类型。变量的存储类型决定了变量何时创建，何时销毁以及它的值保持多久。

四个地方可以用于存储变量： 数据段 +bss ，运行时栈，堆，硬件寄存器。

+Low address++++
+code ++++++++++
+++++++++++++++
+data+++++++++++ #initialized global variable; initialized static auto variable
+bss++++++++++++ #uninitialized global variable; uninitailized static auto variable;
+++++++++++++++
+heap+++++++++++ #malloc： dynamic memory
+-------------------+
+stack +++++++++++ #auto variable
+++High address++++

全局变量
也称为外部变量，它是在函数外部定义的变量。 它不属于哪一个函数，它属于一个源程序文件。其作用域是从定义该变量的位置开始至源文件结束,
既 具有文件作用域（全局作用域）位于 静态内存

变量的存储类型取决与它的声明位置。使用static 关键字可以改变自动变量的存储类型

(1)在任何代码块之外声明的变量总是存储于
静态内存（程序的数据段+bss段，BSS（Block Started by Symbol）通常是指用来存放程序中未初始化的全局变量和静态变量的一块内存区域。 
注意和数据段的区别，BSS存放的是未初始化的全局变量和静态变量，数据段存放的是初始化后的全局变量和静态变量。），而不是堆栈中，
这类变量是静态变量（或全局变量）。

静态变量在程序运行之前创建，在程序的整个执行过程中都存在。

(2)在代码块内声明的变量默认是自动变量(automatic)，存储于堆栈中，这类变量叫做自动（auto）变量。
在程序执行到该代码块时，内部的自动变量才被创建，当程序离开该代码块时，自动变量销毁。

在代码块内部的变量如果给它加上static关键字，可以使其变为静态变量。

注意：

修改变量的存储类型，不等于修改变量的作用域，它仍然只能在该代码块内部按名字访问。
函数的形式参数不能声明为静态，因为函数的参数传递是通过堆栈进行的，用于支持递归。
在变量前加上register关键字，可以告诉编译器该变量应该存储于机器的硬件寄存器，而不是内存。
如果有很多register变量，编译器只会选几个实际存储于寄存器。
变量的初始化: 静态变量总是默认初始化为0，除非显式的赋值。自动变量没有初始值，或认为它的值是个垃圾，
所以在声明一个自动变量时最好在使用前进行赋初值。
